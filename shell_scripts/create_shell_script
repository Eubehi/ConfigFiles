#!/bin/bash

# CONFIGURING BASH VARIABLES
IFS=$'\t\n';
LANG=en_GB.utf-8;

# GLOBAL_READONLY VARIABLES
readonly SCRIPT_LOC=${BASH_SOURCE[0]};

# GLOBAL VARIABLES
EXE=false;

################################################################################
# Print the help of the script
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   Print the help to stdout
################################################################################
function usage::main {
cat << EOF
$0 [OPTIONS]*
Create a generic bash file.

[OPTIONS]
  [-n | --name] FILE  The name of the file
  [-x]                The file created is not an executable
  [+x]                The file created is executable
  [-h | --help]       Print this help and exit immediatly
EOF
}

################################################################################
# Create the script
# Globals:
#   EXE
# Arguments:
#   $1 : the file to create
# Returns:
#   0
################################################################################
function create_script {
  local _file_name=$1;
  if [[ $_file_name == "" ]] ; then
    echo "ERROR : no file name given";
    return 1;
  fi
  if [[ -f $_file_name ]] ; then
    echo "ERROR : file '$_file_name' already exist";
    return 2;
  fi

cat << 'EOF_CREATE_SCRIPT' > $_file_name
#!/bin/bash

# CONFIGURING BASH VARIABLES
IFS=$'\t\n';
LANG=en_GB.utf-8;

# GLOBAL_READONLY VARIABLES
readonly SCRIPT_LOC=${BASH_SOURCE[0]};

# GLOBAL VARIABLES

################################################################################
# Print the help of the script
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   Print the help to stdout
################################################################################
function usage::main {
cat << EOF
$0 [OPTIONS]*

[OPTIONS]
  [-h | --help]     Print this help and exit immediatly
EOF
}

################################################################################
#                           Treating arguments                                 #
################################################################################
if [[ $# -eq 0 ]] ; then
  return; # By doing so, this script can be sourced.
  echo "ERROR : expected at least 1 argument.";
  usage::main;
  exit 1;
fi

while [[ $1 != "" ]] ; do
  case $1 in
    -h | --help) usage::main ; exit 0 ;;
    *          ) usage::main ; exit 2 ;;
  esac
  shift;
done

EOF_CREATE_SCRIPT

  $EXE && chmod +x $_file_name || true;
}

################################################################################
#                           Treating arguments                                 #
################################################################################
if [[ $# -eq 0 ]] ; then
  return; # By doing so, this script can be sourced.
  echo "ERROR : expected at least 1 argument.";
  usage::main;
  exit 1;
fi

while [[ $1 != "" ]] ; do
  case $1 in
    -n | --name)  create_script $2 ; shift ;;
    -x         )  EXE=false ;;
    +x         )  EXE=true  ;;
    -h | --help)  usage::main ; exit 0 ;;
    *          )  echo "ERROR : unexpected argument : '$1'" ;
                  usage::main ; exit 2 ;;
  esac
  shift;
done


