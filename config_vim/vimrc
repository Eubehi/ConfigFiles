" Vimrc file

set nocompatible    " use vim defaults
set ls=2            " allways show status line
set tabstop=4       " numbers of spaces of tab character
set shiftwidth=4    " numbers of spaces to (auto)indent
set scrolloff=3     " keep 3 lines when scrolling
set showcmd         " display incomplete commands
set hlsearch        " highlight searches
set incsearch       " do incremental searching
set ruler           " show the cursor position all the time
set visualbell t_vb=    " turn off error beep/flash
set novisualbell    " turn off visual bell
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=
"set nobackup        " do not keep a backup file
set number          " show line numbers
set ignorecase      " ignore case when searching
"set noignorecase   " don't ignore case
set title           " show title in console title bar
set ttyfast         " smoother changes
"set ttyscroll=0        " turn off scrolling, didn't work well with PuTTY
set modeline        " last lines in document sets vim mode
set modelines=3     " number lines checked for modelines
set shortmess=atI   " Abbreviate messages
set nostartofline   " don't jump to first character when paging
set whichwrap=b,s,h,l,<,>,[,]   " move freely between files
"set viminfo='20,<50,s10,h

set autoindent      " always set autoindenting on
set smartindent     " smart indent
"set cindent         " cindent
"set noautoindent
"set nosmartindent
set nocindent
set switchbuf+=usetab,newtab

colorscheme default
"set autowrite      " auto saves changes when quitting and swiching buffer
set expandtab       " tabs are converted to spaces, use only when required
"set sm             " show matching braces, somewhat annoying...
"set nowrap         " don't wrap lines

syntax on           " syntax highlighing
filetype plugin on  " enable filetype detection, plus loading of filetype plugins

if has("autocmd")
    " Show trailing whitespace in red.
    highlight ExtraWhitespace ctermbg=red guibg=red
    " Show tabs in dark green.
    highlight Tabs ctermbg=darkgreen guibg=darkgreen
    " Keeping configuration even when changing colorscheme.
    autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
    autocmd ColorScheme * highlight Tabs ctermbg=darkgreen guibg=darkgreen

    " When entering a new window, match ExtraWhitespace with 2match, and Tabs with
    " 3match. When leaving a window, clearing all matches (version > 702).
    autocmd BufWinEnter * 2match ExtraWhitespace /\s\+\%#\@<!$/
    autocmd BufWinEnter * 3match Tabs /\t/
    autocmd BufWinLeave * call clearmatches()

    " Restore cursor position
    au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

    " Filetypes (au = autocmd)
    au FileType helpfile set nonumber      " no line numbers when viewing help
    au FileType helpfile nnoremap <buffer><cr> <c-]>   " Enter selects subject
    au FileType helpfile nnoremap <buffer><bs> <c-T>   " Backspace to go back

    " When using mutt, text width=72
    au FileType mail,tex set textwidth=72
    nnoremap <C-p> :set invpaste paste?<CR>
    set pastetoggle=<C-p>
    set showmode

    " File formats
    au BufNewFile,BufRead  *.phtml  set syntax=php
    au BufNewFile,BufRead  *.pls    set syntax=dosini
    au BufNewFile,BufRead  modprobe.conf    set syntax=modconf

    " on C file, man only search for sections 2 and 3
    autocmd BufNewFile,BufRead *.[ch] setlocal kp=manterm\ 2:3
    autocmd BufNewFile,BufRead *.cc setlocal kp=manterm\ 2:3

    " Ctrl+X O
    autocmd FileType python set omnifunc=pythoncomplete#Complete
    autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
    autocmd FileType css set omnifunc=csscomplete#CompleteCSS
    autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
    autocmd FileType php set omnifunc=phpcomplete#CompletePHP
    autocmd FileType c set omnifunc=ccomplete#Complete

    autocmd FileType php noremap <C-L> :!php -l %<CR>
    autocmd Filetype html,xml,xsl source ~/.vim/closetag.vim
endif

" configure browser for haskell_doc.vim
let g:haddock_browser = "/usr/bin/firefox"

set colorcolumn=80
highlight ColorColumn ctermbg=0 guibg=black

" Keyboard mappings
vnoremap <Leader>s  :s/\<<C-r><C-w>\>/
nnoremap <Leader>s  :%s/\<<C-r><C-w>\>//g
nnoremap <Leader>g  :g /<C-r><C-w>/
nnoremap <Leader>h  :grep "\b<C-r><C-w>\b" *
nnoremap <Leader>f  :lgrep "\b<C-r><C-w>\b" %
 noremap <C-Up>     {
 noremap <C-Down>   }


" Special command
command! YYMD   :call GetTime("%Y/%m/%d")
command! DMYY   :call GetTime("%d/%m/%Y")
command! LU     :tab sview +:59go $HOME/liens_utiles.yaml
command! BASH   :set syntax=sh
command! TASKS  :exe "lgrep -nE '\\\b(TODO\\\|FIXME\\\|XXX)\\\b' %" | noh | lwindow
command! BUGS   :exe "lgrep -nE '\\\bBUG\\\#[0-9]+?' %" | noh | lwindow
command! NI     :call append(line("."), "! Do_you_demand_a_shrubbery_question_tag")
command! TC     :call append(line("."), "£ tempo_cycles(1); £")
command! SOURCE :source $HOME/.vimrc | source $HOME/.gvimrc
command! -nargs=* ArgGrep :call setqflist([]) | exe "argdo grepadd! <args> %"    | cw | wincmd T
command! -nargs=* BufGrep :call setqflist([]) | call BufDo(" grepadd! <args> %") | cw | wincmd T
command! -nargs=* TabGrep :call setqflist([]) | call TabDo(" grepadd! <args> %") | cw | wincmd T
command! -nargs=* WinGrep :call setqflist([]) | call WinDo("lgrepadd! <args> %") | lw

" Functions
" Like windo but restore the current window.
function! WinDo(command)
  let currwin=winnr()
  let curaltwin=winnr("#")
  execute 'windo ' . a:command
  " restore previous/alt window
  execute curaltwin . 'wincmd w'
  " restore current window
  execute currwin . 'wincmd w'
endfunction

" Like bufdo but restore the current buffer.
function! BufDo(command)
  let currBuff = bufnr("%")
  execute 'bufdo ' . a:command
  execute 'buffer ' . currBuff
endfunction

" Like tabdo but restore the current tab.
function! TabDo(command)
  let currTab = tabpagenr()
  execute 'tabdo ' . a:command
  execute 'tabn ' . currTab
endfunction

" Create a header for a bash function
function! BashFunctionHeader()
  call append(line(".") + 0, '################################################################################')
  call append(line(".") + 1, '# TODO')
  call append(line(".") + 2, '# Globals:')
  call append(line(".") + 3, '#   TODO')
  call append(line(".") + 4, '# Arguments:')
  call append(line(".") + 5, '#   TODO')
  call append(line(".") + 6, '# Returns:')
  call append(line(".") + 7, '#   TODO')
  call append(line(".") + 8, '################################################################################')
endfunction

" Append the time using the given format
function! GetTime(format)
  let today = strftime(a:format)
  execute ("normal a" . today)
endfunction

